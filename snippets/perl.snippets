# #!/usr/bin/perl
snippet #!
	#!/usr/bin/perl
	
# Hash Pointer
snippet .
	 =>
# Function
snippet sub
	sub ${1:function_name} {
		${2:#body ...}
	}
# Conditional
snippet if
	if (${1}) {
		${2:# body...}
	}
# Conditional if..else
snippet ife
	if (${1}) {
		${2:# body...}
	} else {
		${3:# else...}
	}
# Conditional if..elsif..else
snippet ifee
	if (${1}) {
		${2:# body...}
	} elsif (${3}) {
		${4:# elsif...}
	} else {
		${5:# else...}
	}
# Conditional One-line
snippet xif
	${1:expression} if ${2:condition};${3}
# Unless conditional
snippet unless
	unless (${1}) {
		${2:# body...}
	}
# Unless conditional One-line
snippet xunless
	${1:expression} unless ${2:condition};${3}
# Try/Except
snippet eval
	eval {
		${1:# do something risky...}
	};
	if ($@) {
		${2:# handle failure...}
	}
# While Loop
snippet wh
	while (${1}) {
		${2:# body...}
	}
# While Loop One-line
snippet xwh
	${1:expression} while ${2:condition};${3}
# For Loop
snippet for
	for (my $${2:var} = 0; $$2 < ${1:count}; $$2${3:++}) {
		${4:# body...}
	}
# Foreach Loop
snippet fore
	foreach my $${1:x} (@${2:array}) {
		${3:# body...}
	}
# Foreach Loop One-line
snippet xfore
	${1:expression} foreach @${2:array};${3}
# Package
snippet cl
	package ${1:ClassName};
	
	use base qw(${2:ParentClass});
	
	sub new {
		my $class = shift;
		$class = ref $class if ref $class;
		my $self = bless {}, $class;
		$self;
	}
	
	1;${3}
# Read File
snippet slurp
	my $${1:var};
	{ local $/ = undef; local *FILE; open FILE, "<${2:file}"; $$1 = <FILE>; close FILE }${3}
snippet readfile
	open ${1:FILE}, ${2:$ARGV[0]} or die "Cannot open [$2] for reading";

	while (<$1>) {
		print "line: $_";${3:}
	}
	close($1);
snippet ddate
	use POSIX qw(strftime);
	my $${1:current_time} = strftime "${2:%Y-%M-%S}", localtime;${3}
snippet switch
	switch ($val) {
		case ${1:} 	{ ${2:}}
		else		{  }
	}
snippet def
	defined( ${1:} )${2:}
snippet udef
	!defined( ${1:} )${2:}
snippet optargs
	my $verbose = 0;
	my $help = 0;

	sub usage {
		print "
		 --verbose, -v              Increase verbosity
		 --help, -h                 Display this help message and exit\n";
		 exit(0);
	}
	Getopt::Long::Configure ("bundling");
	GetOptions (
		"help|h",	\$help,
		"verbose|v+",   \$verbose,
		) or die("Error in command line arguments\n");
	usage() if $help;
snippet fparse
	open FILE, ${1:$file} or die "Cannot open [${2:$1}] for reading";
	while (<FILE>) {
		my $line = $_;
		chomp $line;
		print "$line\n" if $verbose > 1;
		given ($line) {
			${3:}
			default {
				print "default [$line]\n" if ($verbose > 0);
			}
		}
	}
	close(FILE);
snippet when
	when (${1:/}${2:}$1) {
		${3:# code }
	}${4:}
snippet prv
	print "${1:}\n" if ($verbose > ${2:0});${3}
snippet bp
	#!/usr/bin/perl

	use strict;
	use warnings;
	use Getopt::Long;
	use feature qw(switch);
snippet url
	use LWP::Simple;
	my $url = "${1:http://whatev.er}";
	my $content = get($url);${2:}

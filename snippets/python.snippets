snippet #!
	#!/usr/bin/env python

snippet imp
	import ${1:module}
# Module Docstring
snippet docs
	'''
	File: ${1:`Filename('$1.py', 'foo.py')`}
	Author: ${2:`g:snips_author`}
	Description: ${3}
	'''
snippet wh
	while ${1:condition}:
		${2:# code...}
snippet for
	for ${1:needle} in ${2:haystack}:
		${3:# code...}
# New Class
snippet cl
	class ${1:ClassName}(${2:object}):
		"""${3:docstring for $1}"""
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4
			${6}
# New Function
snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		"""${3:docstring for $1}"""
		${4:pass}
snippet deff
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${3}
# New Method
snippet defs
	def ${1:mname}(self, ${2:arg}):
		${3:pass}
# New Property
snippet property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
# Lambda
snippet ld
	${1:var} = lambda ${2:vars} : ${3:action}
snippet .
	self.
snippet try Try/Except
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
snippet try Try/Except/Else
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
snippet try Try/Except/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${5:pass}
snippet try Try/Except/Else/Finally
	try:
		${1:pass}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5:pass}
	finally:
		${6:pass}
# if __name__ == '__main__':
snippet ifmain
	if __name__ == '__main__':
		${1:main()}
# __magic__
snippet _
	__${1:init}__${2}
snippet pdb
	import pdb; pdb.set_trace()
snippet argparse
	import argparse
	parser = argparse.ArgumentParser(description='${1:Brief description}')
	# subparsers = parser.add_subparsers(help='commands')

	parser.add_argument('-n', '--dry-ryn',
						action='store_true',
						help='Dry run mode')
	parser.add_argument('-v', '--verbose',
						action='count',
						default=0,
						help='Increase verbosity')

	args = parser.parse_args()
snippet argarg
	${1:parser}.add_argument('${2:-s}', '${3:--long-name}',
						help='${4:Help message}')

snippet find
	for root, dirs, files in os.walk(${1:directory}):
	    for f in files:
	        fullpath = os.path.join(root, f)
snippet hostname
	os.uname()[1]
snippet ts
	import time
	import datetime
	ts = datetime.datetime.fromtimestamp(time.time()).strftime('%Y%m%dT%H%M%S')
snippet basename
	os.path.basename(${1:})
snippet abspath
	os.path.abspath(${1:})
snippet subparse
	${1:name} = subparsers.add_parser('$1', help='${2:Help message}')
	$1.set_defaults(which='$1')
snippet loggeri
	def config_logging(level):
		levels = [logging.CRITICAL, logging.ERROR, logging.WARNING,
				  logging.INFO, logging.DEBUG]
		script_name = os.path.basename(__file__.replace('.py', ''))
		try:
			fname = '/var/log/{}.log'.format(script_name)
			open(fname, 'a+')
		except IOError:
			fname = '{}.log'.format(script_name)

		log.setLevel(logging.DEBUG)
		format = logging.Formatter("%(asctime)s [%(filename)s:%(lineno)s - " +
								   "%(funcName)20s() ] " +
								   "%(message)s")

		if level != 0:
			ch = logging.StreamHandler(sys.stdout)
			ch.setFormatter(format)
			log.addHandler(ch)
			try:
				log.setLevel(levels[level])
			except IndexError:
				log.setLevel(levels[-1])

		fh = RotatingFileHandler(fname, maxBytes=(1048576*5), backupCount=7)
		fh.setFormatter(format)
		log.addHandler(fh)

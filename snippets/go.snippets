snippet fp
	fmt.Println(${1:})
snippet fpr
	fmt.Println(${1:})

snippet fps
	fmt.Println(fmt.Sprintf("${1:}", ${2:}))

snippet prettyjson
	// dont forget to import "encoding/json"
	${1:variable}JSON, err := json.MarshalIndent($1, "", "    ")
	if err != nil {
		panic(err)
	}
	fmt.Println(string($1JSON))

snippet fe
	fmt.Errorf("${1:message}", ${2:args})

snippet fs
	fmt.Sprintf("${1:message}", ${2:args})

snippet iferr
	if err != nil {
		${1:panic(err)}
	}

snippet func
	func ${1:awesomeFunction}(${2:args) (${3:returns}) {
		${4:body}
	}

snippet for
	for i := 0; i < ${1:10}; i++ {
		${2:}
	}

snippet exists
	if _, err := os.Stat(${1:"file"}); os.IsNotExist(err) {
		panic(fmt.Sprintf("Error, file %s does not exist", $1))
	}
snippet decode64
	// import "encoding/base64"
	decoded, err := base64.StdEncoding.DecodeString(${1:encoded})

snippet encode64
	// import "encoding/base64"
	encoded := base64.StdEncoding.EncodeToString(${1:string})

snippet isdir
	if info, err := os.Stat(${1:path}); err == nil && info.IsDir() {

	}
snippet find
	files, err := ioutil.ReadDir(${1:dir})
snippet slurp
	ioutil.ReadFile(${1:file_path})

snippet pvar
	fmt.Println(fmt.Sprintf("$1: %+v", ${1:var}))

snippet atoi
	${1:number}, err := strconv.Atoi(${2:string})

snippet atoi64
	${1:i64}, err := strconv.ParseInt(${2:string}, 10, 32)
snippet expanduser
	dir, err := homedir.Expand(${1:path})
snippet pan
	panic(${1:"panic!"})

snippet b2file
	err := ioutil.WriteFile(${1:"fout"}, ${2:bytes}, ${3:0644})

snippet loge
	log.WithFields(log.Fields{
		"${1:this}": $1,
	}).Error("${2:what is happening ?}")

snippet logd
	log.WithFields(log.Fields{
		"${1:this}": $1,
	}).Debug("${2:what is happening ?}")

snippet logp
	log.WithFields(log.Fields{
		"${1:err}": $1,
	}).Panic("${2:what is happening ?}")

snippet heredoc
	heredoc.Doc(`
		${1:your doc here}
	`)

snippet ftest
	func Test${1:}(t *testing.T) {
		var cases = []struct{
		}{}

		for _, test := range cases {

		}
	}
snippet in
	if ${1:value}, ok := ${2:haystack}[${3:needle}]; ok == true {
		${4:}
	}
snippet cparg
	${1:command}Cmd.PersistentFlags().${2:String}P("${3:long}", "${4:sort}", ${5:default}, "${6:Help message}")

snippet append
	${1:list} = append($1, ${2:new})
snippet range
	for ${1:_}, ${2:needle} := range ${3:haystack} {
		${4:}
	}
